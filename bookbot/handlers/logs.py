from aiogram import Dispatcher, types
from aiogram.filters import Command
import sqlite3
from db import get_conn
import logging

logger = logging.getLogger(__name__)

def get_log_summary():
    """–ü–æ–ª—É—á–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é –∏ –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–æ–≥–æ–≤"""
    conn = get_conn()
    cursor = conn.cursor()

    try:
        summary = {}

        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π
        cursor.execute('SELECT COUNT(*) FROM book_log')
        summary['total_events'] = cursor.fetchone()[0]

        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–±—ã—Ç–∏–π
        cursor.execute('''
        SELECT id, book_id, event_type, event_date, notes, list_item_id
        FROM book_log
        ORDER BY event_date DESC
        LIMIT 5
        ''')
        recent_logs = cursor.fetchall()
        summary['recent_logs'] = [
            {
                'event_type': row[2],
                'event_date': row[3],
                'book_id': row[1],
                'details': row[4],
                'list_item_id': row[5]
            }
            for row in recent_logs
        ]

        logger.info("–õ–æ–≥–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã")
        return summary

    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}")
        raise
    finally:
        conn.close()

def format_log_summary(summary):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–≥–∞—Ö –¥–ª—è Telegram"""
    if not summary:
        return "–õ–æ–≥–∏ –ø—É—Å—Ç—ã"

    formatted = []
    formatted.append("üßæ <b>–ê–ö–¢–ò–í–ù–û–°–¢–¨</b>")
    formatted.append(f"–í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {summary['total_events']}")
    formatted.append("")

    formatted.append("<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:</b>")
    if summary['recent_logs']:
        for log in summary['recent_logs']:
            formatted.append(
                f"‚Ä¢ <i>{log['event_type']}</i> ‚Äî {log['event_date']}"
                + (f", –∫–Ω–∏–≥–∞ ID {log['book_id']}" if log['book_id'] else "")
                + (f" ‚Äî {log['details']}" if log['details'] else "")
            )
    else:
        formatted.append("–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π.")
    
    return "\n".join(formatted)

async def cmd_log(message: types.Message):
    summary = get_log_summary()
    text = format_log_summary(summary)
    await message.answer(text, parse_mode="HTML")

def register_handlers(dp: Dispatcher):
    dp.message.register(cmd_log, Command("log"))

