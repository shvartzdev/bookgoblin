from aiogram import Dispatcher, types, Bot
from aiogram.filters import Command
import sqlite3
from db import get_conn
import logging
from datetime import datetime, timedelta
import asyncio
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import calendar

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = None
bot_instance = None
user_id = None  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤

def get_monthly_reading_report():
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç—á–µ—Ç –æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥–∞—Ö –∑–∞ —Ç–µ–∫—É—â–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –º–µ—Å—è—Ü"""
    conn = get_conn()
    cursor = conn.cursor()

    try:
        # –ù–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        now = datetime.now()
        month_start = datetime(now.year, now.month, 1, 0, 0, 0)
        month_start_str = month_start.strftime('%Y-%m-%d %H:%M:%S')

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è "finished_reading" –∑–∞ —Ç–µ–∫—É—â–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –º–µ—Å—è—Ü —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–Ω–∏–≥–∞—Ö
        cursor.execute('''
        SELECT 
            bl.id,
            bl.book_id,
            bl.event_date,
            bl.notes,
            b.title,
            b.authors,
            b.series_name,
            b.series_number,
            b.pages,
            b.format
        FROM book_log bl
        JOIN books b ON bl.book_id = b.id
        WHERE bl.event_type = 'finished_reading' 
        AND bl.event_date >= ?
        ORDER BY bl.event_date DESC
        ''', (month_start_str,))
        
        finished_books = cursor.fetchall()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∞–∫–∂–µ —Å–æ–±—ã—Ç–∏—è "marked_as_read" (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
        cursor.execute('''
        SELECT 
            bl.id,
            bl.book_id,
            bl.event_date,
            bl.notes,
            b.title,
            b.authors,
            b.series_name,
            b.series_number,
            b.pages,
            b.format
        FROM book_log bl
        JOIN books b ON bl.book_id = b.id
        WHERE bl.event_type = 'marked_as_read' 
        AND bl.event_date >= ?
        ORDER BY bl.event_date DESC
        ''', (month_start_str,))
        
        marked_books = cursor.fetchall()
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ book_id
        all_books = {}
        
        for book in finished_books + marked_books:
            book_id = book[1]
            # –ï—Å–ª–∏ –∫–Ω–∏–≥–∞ —É–∂–µ –µ—Å—Ç—å, –±–µ—Ä–µ–º –±–æ–ª–µ–µ –ø–æ–∑–¥–Ω—é—é –¥–∞—Ç—É
            if book_id not in all_books or book[2] > all_books[book_id][2]:
                all_books[book_id] = book
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
        books_list = list(all_books.values())
        books_list.sort(key=lambda x: x[2], reverse=True)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_books = len(books_list)
        total_pages = sum(book[8] for book in books_list if book[8])
        
        result = {
            'books': books_list,
            'total_books': total_books,
            'total_pages': total_pages,
            'period': month_start.strftime('%d.%m.%Y'),
            'month_name': month_start.strftime('%B %Y')  # –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        }
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç—á–µ—Ç –æ —á—Ç–µ–Ω–∏–∏ –∑–∞ {month_start.strftime('%B %Y')}: {total_books} –∫–Ω–∏–≥")
        return result

    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –æ —á—Ç–µ–Ω–∏–∏: {e}")
        raise
    finally:
        conn.close()

def get_monthly_purchases_report():
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç—á–µ—Ç –æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥–∞—Ö –∑–∞ —Ç–µ–∫—É—â–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –º–µ—Å—è—Ü"""
    conn = get_conn()
    cursor = conn.cursor()

    try:
        # –ù–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        now = datetime.now()
        month_start = datetime(now.year, now.month, 1, 0, 0, 0)
        month_start_str = month_start.strftime('%Y-%m-%d %H:%M:%S')

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –ø–æ–∫—É–ø–∫–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –º–µ—Å—è—Ü
        cursor.execute('''
        SELECT 
            bl.id,
            bl.book_id,
            bl.event_date,
            bl.notes,
            b.title,
            b.authors,
            b.series_name,
            b.series_number,
            b.format,
            b.source
        FROM book_log bl
        JOIN books b ON bl.book_id = b.id
        WHERE bl.event_type IN ('moved_from_buy_to_library', 'added') 
        AND bl.event_date >= ?
        AND b.source = 'shop'
        ORDER BY bl.event_date DESC
        ''', (month_start_str,))
        
        purchased_books = cursor.fetchall()
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ book_id (–±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ)
        unique_books = {}
        for book in purchased_books:
            book_id = book[1]
            if book_id not in unique_books or book[2] > unique_books[book_id][2]:
                unique_books[book_id] = book
        
        books_list = list(unique_books.values())
        books_list.sort(key=lambda x: x[2], reverse=True)
        
        result = {
            'books': books_list,
            'total_books': len(books_list),
            'period': month_start.strftime('%d.%m.%Y'),
            'month_name': month_start.strftime('%B %Y')  # –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        }
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç—á–µ—Ç –æ –ø–æ–∫—É–ø–∫–∞—Ö –∑–∞ {month_start.strftime('%B %Y')}: {len(books_list)} –∫–Ω–∏–≥")
        return result

    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–∫—É–ø–∫–∞—Ö: {e}")
        raise
    finally:
        conn.close()

def format_reading_report(report):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–º –¥–ª—è Telegram"""
    if not report or not report['books']:
        return f"üìö <b>–ü–†–û–ß–ò–¢–ê–ù–û –ó–ê –ú–ï–°–Ø–¶</b>\n\n–ù–µ—Ç –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥ —Å {report['period'] if report else '–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–µ—Å—è—Ü–∞'}"

    formatted = []
    formatted.append(f"–° {report['period']}")
    formatted.append(f"–í—Å–µ–≥–æ –∫–Ω–∏–≥: <b>{report['total_books']}</b>")
    
    if report['total_pages']:
        formatted.append(f"–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: <b>{report['total_pages']}</b>")
    
    formatted.append("")

    for book in report['books']:
        book_id = book[1]
        event_date = datetime.strptime(book[2], '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y')
        title = book[4]
        authors = book[5]
        series_name = book[6]
        series_number = book[7]
        pages = book[8]
        book_format = book[9]
        notes = book[3]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–Ω–∏–≥–µ
        book_info = []
        book_info.append(f"üìñ <b>{title}</b>")
        book_info.append(f"üë§ {authors}")
        
        if series_name:
            series_info = f"üìö {series_name}"
            if series_number:
                series_info += f" #{series_number}"
            book_info.append(series_info)
        
        details = []
        details.append(f"ID: {book_id}")
        details.append(f"üìÖ {event_date}")
        
        if pages:
            details.append(f"üìÑ {pages} —Å—Ç—Ä.")
        
        if book_format:
            format_emoji = "üì±" if book_format == "digital" else "üìö"
            details.append(f"{format_emoji} {book_format}")
            
        book_info.append(f"<i>{' ‚Ä¢ '.join(details)}</i>")
        
        if notes:
            book_info.append(f"üí≠ {notes}")
        
        formatted.append("\n".join(book_info))
        formatted.append("")
    
    return "\n".join(formatted)

def format_purchases_report(report):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –ø–æ–∫—É–ø–∫–∞—Ö –¥–ª—è Telegram"""
    if not report or not report['books']:
        return f"üõí <b>–ö–£–ü–õ–ï–ù–û –ó–ê –ú–ï–°–Ø–¶</b>\n\n–ù–µ—Ç –ø–æ–∫—É–ø–æ–∫ —Å {report['period'] if report else '–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–µ—Å—è—Ü–∞'}"

    formatted = []
    formatted.append(f"–° {report['period']}")
    formatted.append(f"–í—Å–µ–≥–æ –∫–Ω–∏–≥: <b>{report['total_books']}</b>")
    formatted.append("")

    for book in report['books']:
        book_id = book[1]
        event_date = datetime.strptime(book[2], '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y')
        title = book[4]
        authors = book[5]
        series_name = book[6]
        series_number = book[7]
        book_format = book[8]
        notes = book[3]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–Ω–∏–≥–µ
        book_info = []
        book_info.append(f"üìö <b>{title}</b>")
        book_info.append(f"üë§ {authors}")
        
        if series_name:
            series_info = f"üìö {series_name}"
            if series_number:
                series_info += f" #{series_number}"
            book_info.append(series_info)
        
        details = []
        details.append(f"ID: {book_id}")
        details.append(f"üõí {event_date}")
        
        if book_format:
            format_emoji = "üì±" if book_format == "digital" else "üìö"
            details.append(f"{format_emoji} {book_format}")
            
        book_info.append(f"<i>{' ‚Ä¢ '.join(details)}</i>")
        
        if notes:
            book_info.append(f"üí≠ {notes}")
        
        formatted.append("\n".join(book_info))
        formatted.append("")
    
    return "\n".join(formatted)

def format_combined_report(reading_report, purchases_report):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–º –∏ –∫—É–ø–ª–µ–Ω–Ω–æ–º"""
    formatted = []
    formatted.append("üìä <b>–ú–ï–°–Ø–ß–ù–´–ô –û–¢–ß–ï–¢</b>")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
    month_name = reading_report.get('month_name', '—Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü')
    formatted.append(f"–ó–∞ {month_name}")
    formatted.append("")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = []
    if reading_report['total_books'] > 0:
        stats.append(f"üìö –ü—Ä–æ—á–∏—Ç–∞–Ω–æ: <b>{reading_report['total_books']}</b> –∫–Ω–∏–≥")
        if reading_report['total_pages']:
            stats.append(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü: <b>{reading_report['total_pages']}</b>")
    
    if purchases_report['total_books'] > 0:
        stats.append(f"üõí –ö—É–ø–ª–µ–Ω–æ: <b>{purchases_report['total_books']}</b> –∫–Ω–∏–≥")
    
    if stats:
        formatted.extend(stats)
        formatted.append("")
    
    # –†–∞–∑–¥–µ–ª –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
    if reading_report['books']:
        
        for book in reading_report['books']:
            book_id = book[1]
            event_date = datetime.strptime(book[2], '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y')
            title = book[4]
            authors = book[5]
            series_name = book[6]
            series_number = book[7]
            pages = book[8]
            book_format = book[9]
            notes = book[3]
            
            book_info = []
            book_info.append(f"üìö <b>{title}</b>")
            book_info.append(f"üë§ {authors}")
            
            if series_name:
                series_info = f"üìö {series_name}"
                if series_number:
                    series_info += f" #{series_number}"
                book_info.append(series_info)
            
            details = []
            details.append(f"ID: {book_id}")
            details.append(f"üìÖ {event_date}")
            
            if pages:
                details.append(f"üìÑ {pages} —Å—Ç—Ä.")
            
            if book_format:
                format_emoji = "üì±" if book_format == "digital" else "üìö"
                details.append(f"{format_emoji} {book_format}")
                
            book_info.append(f"<i>{' ‚Ä¢ '.join(details)}</i>")
            
            if notes:
                book_info.append(f"üí≠ {notes}")
            
            formatted.append("\n".join(book_info))
            formatted.append("")
    
    # –†–∞–∑–¥–µ–ª –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ
    if purchases_report['books']:
        formatted.append("üõí <b>–ö–£–ü–õ–ï–ù–û:</b>")
        formatted.append("")
        
        for book in purchases_report['books']:
            book_id = book[1]
            event_date = datetime.strptime(book[2], '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y')
            title = book[4]
            authors = book[5]
            series_name = book[6]
            series_number = book[7]
            book_format = book[8]
            notes = book[3]
            
            book_info = []
            book_info.append(f"üìö <b>{title}</b>")
            book_info.append(f"üë§ {authors}")
            
            if series_name:
                series_info = f"üìö {series_name}"
                if series_number:
                    series_info += f" #{series_number}"
                book_info.append(series_info)
            
            details = []
            details.append(f"ID: {book_id}")
            details.append(f"üõí {event_date}")
            
            if book_format:
                format_emoji = "üì±" if book_format == "digital" else "üìö"
                details.append(f"{format_emoji} {book_format}")
                
            book_info.append(f"<i>{' ‚Ä¢ '.join(details)}</i>")
            
            if notes:
                book_info.append(f"üí≠ {notes}")
            
            formatted.append("\n".join(book_info))
            formatted.append("")
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ, –Ω–∏ –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ
    if not reading_report['books'] and not purchases_report['books']:
        formatted.append(f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ {month_name}")
    
    return "\n".join(formatted)

def split_message(text, max_length=4000):
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏"""
    if len(text) <= max_length:
        return [text]
    
    parts = []
    lines = text.split('\n')
    current_part = []
    current_length = 0
    
    for line in lines:
        line_length = len(line) + 1  # +1 –¥–ª—è \n
        
        if current_length + line_length > max_length and current_part:
            parts.append('\n'.join(current_part))
            current_part = [line]
            current_length = line_length
        else:
            current_part.append(line)
            current_length += line_length
    
    if current_part:
        parts.append('\n'.join(current_part))
    
    return parts

async def send_monthly_report_auto():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    if not bot_instance or not user_id:
        logger.warning("–ë–æ—Ç –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤")
        return
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞ –∫–∞–∫–æ–π –º–µ—Å—è—Ü –æ—Ç—á–µ—Ç (–ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü)
        now = datetime.now()
        if now.month == 1:
            prev_month = 12
            prev_year = now.year - 1
        else:
            prev_month = now.month - 1
            prev_year = now.year
            
        prev_month_name = datetime(prev_year, prev_month, 1).strftime('%B %Y')
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∑–∞ {prev_month_name}")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
        reading_report = get_previous_month_reading_report()
        purchases_report = get_previous_month_purchases_report()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
        header = f"üóì <b>–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –û–¢–ß–ï–¢ –ó–ê {prev_month_name.upper()}</b>\n\n"
        report_text = format_combined_report(reading_report, purchases_report)
        full_text = header + report_text
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        parts = split_message(full_text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏
        for i, part in enumerate(parts):
            if i == 0:
                await bot_instance.send_message(user_id, part, parse_mode="HTML")
            else:
                await bot_instance.send_message(
                    user_id, 
                    f"<i>–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...</i>\n\n{part}", 
                    parse_mode="HTML"
                )
        
        logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –∑–∞ {prev_month_name} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        try:
            await bot_instance.send_message(
                user_id, 
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"
            )
        except:
            pass

def setup_scheduler(bot: Bot, target_user_id: int):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤"""
    global scheduler, bot_instance, user_id
    
    bot_instance = bot
    user_id = target_user_id
    
    if scheduler is None:
        scheduler = AsyncIOScheduler()
        
        # –ó–∞–ø—É—Å–∫ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ –≤ 9:00
        scheduler.add_job(
            send_monthly_report_auto,
            trigger=CronTrigger(
                day='last',  # –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
                hour=9,
                minute=0
            ),
            id='monthly_report',
            replace_existing=True,
            misfire_grace_time=3600  # –µ—Å–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –∑–∞–ø—É—Å–∫, –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞
        )
        
        scheduler.start()
        logger.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}")
    else:
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

def stop_scheduler():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    global scheduler
    if scheduler:
        scheduler.shutdown()
        scheduler = None
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def cmd_last_read(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–º –∏ –∫—É–ø–ª–µ–Ω–Ω–æ–º –∑–∞ –º–µ—Å—è—Ü"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–∞ –æ—Ç—á–µ—Ç–∞
        reading_report = get_monthly_reading_report()
        purchases_report = get_monthly_purchases_report()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
        text = format_combined_report(reading_report, purchases_report)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        parts = split_message(text)
        
        for i, part in enumerate(parts):
            if i == 0:
                await message.answer(part, parse_mode="HTML")
            else:
                await message.answer(f"<i>–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...</i>\n\n{part}", parse_mode="HTML")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã last_read: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞")

def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
    dp.message.register(cmd_last_read, Command("last_read"))
