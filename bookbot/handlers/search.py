from aiogram import Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
import sqlite3
from aiogram.fsm.state import State, StatesGroup

class SearchStates(StatesGroup):
    waiting_query = State()

async def search_start(message: types.Message, state: FSMContext):
    await state.set_state(SearchStates.waiting_query)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∏:")

async def search_books(message: types.Message, state: FSMContext):
    query = message.text.strip()
    if not query:
        await message.answer("–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    words = query.lower().split()
    if not words:
        await message.answer("–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    conn = sqlite3.connect("data/library.db")
    cursor = conn.cursor()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
    cursor.execute("""
        SELECT id, title, authors, pages, series_name, series_number
        FROM books
    """)
    rows = cursor.fetchall()

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤ Python
    filtered = []
    for row in rows:
        id, title, authors, pages, series_name, series_number = row
        # –ö–æ–Ω–∫–∞—Ç–µ–Ω–∏—Ä—É–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è –≤ –æ–¥–∏–Ω –±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        searchable_text = " ".join([
            title or "",
            authors or "",
            series_name or ""
        ]).lower()

        if all(word in searchable_text for word in words):
            filtered.append(row)
            if len(filtered) >= 10:  # –ª–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                break

    conn.close()

    if not filtered:
        await message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üò¢")
    else:
        text = "\n\n".join(
            f"<b>{title}</b> (ID: {book_id})\n"
            f"–ê–≤—Ç–æ—Ä: {authors}"
            + (f"\n–°–µ—Ä–∏—è: {series_name} (–¢–æ–º {series_number})" if series_name else "")
            + (f"\n–°—Ç—Ä–∞–Ω–∏—Ü: {pages}" if pages else "")
            for book_id, title, authors, pages, series_name, series_number in filtered
        )
        await message.answer(text, parse_mode="HTML")

    await state.clear()




def register_handlers(dp: Dispatcher):
    dp.message.register(search_start, Command("search"))
    dp.message.register(search_books, SearchStates.waiting_query)
